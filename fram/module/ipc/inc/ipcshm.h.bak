#ifndef __IPCSHM_H__
#define __IPCSHM_H__

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>

#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAXSHMLEN 4096
#define STKSIZ (8*sizeof(void*) - 2) 
#define CUTOFF 8

typedef struct shm_head{
	int size;
	int fsize;
	int pin_head;
	int pin_tail;
	int blocknum;
}shm_head;

typedef struct shm_block{	
	char name[20];
	int sortflag;
	int num;
	int condoffset;
	int condlen;
	int pstart;
	int pend;
	int recsize;
	int dirtyflg;
	time_t modytime;
}shm_block;


int _vipc_shm_create(key_t key,size_t size,mode_t mode);
int _vipc_shm_getid(key_t key);
int _vipc_shm_open(int id,void** mptr);
int _vipc_shm_close(void* mptr);
int _vipc_shm_destroy(int id);
int _vipc_shm_stat(int id,struct shmid_ds* info);
int _vipc_shm_write(void* pshmin,void* data,unsigned int len);
int _vipc_shm_swrite(void* pshmin,void* data,unsigned int len,int overtime);
int _vipc_shm_read(void* pshmout,void* data,unsigned int len);
int _vipc_shm_sread(void* pshmout,void* data,unsigned int len,int overtime);

int cmpnull(void* data,int len);
int cmp(void* data,void* cond, unsigned int len);

int shm_init(key_t key,size_t size,mode_t mode);
int shm_init_safe(key_t key,size_t size,mode_t mode);
int shm_destroy(key_t key);
int shm_destroy_safe(key_t key,int overtime);
int shm_getshminfo(key_t key,struct shm_head** shmhead);
int shm_getshminfo_safe(key_t key,struct shm_head** shmhead,int overtime);
int shm_getblockinfo(key_t key,char *blockname,struct shm_block** shmblock);
int shm_getblockinfo_safe(key_t key,char *blockname,struct shm_block** shmblock,int overtime);
void *shm_bsearch(void* pshm,struct shm_block *shmblock,const void *cond);
int shm_setblockinfo(key_t key,struct shm_block* pshmblock);
int shm_setblockinfo_safe(key_t key,struct shm_block* pshmblock,int overtime);
void _shm_ssort(void *pshm,struct shm_block *pshmblock);
void _shm_qsort(void *pshm,struct shm_block *pshmblock);
int shm_qsort(key_t key,char *blockname);
int shm_qsort_safe(key_t key,char *blockname,int overtime);
int _shm_upload(key_t key,void* data,int len,int sublen,int condoffset,int condlen,char* blockname);
int _shm_upload_safe(key_t key,void* data,int len,int sublen,int condoffset,int condlen,char* blockname,int overtime);

/**
 * [shm_upload(key,data,len,blockname,nodetype,condtype) description]
 * 上传数据到共享内存中
 * @param  int	 key       [IPC_KEY]
 * @param  void	*data      [数据区地址]
 * @param  int	 len       [数据长度]
 * @param  char	*blockname [数据区名称]
 * @param  type	 nodetype  [包含记录类型]
 * @param  type	 condtype  [索引字段名]
 * @return                 [成功返回0，失败返回-1]
 */
#define shm_upload(key,data,len,blockname,nodetype,index) ({\
	int sublen=sizeof(nodetype);  \
	int condlen=sizeof(((nodetype *)0)->index);  \
	int condoffset=((size_t) &((nodetype *)0)->index);  \
	_shm_upload(key,data,len,sublen,condoffset,condlen,blockname); })

int _shm_upload_safe(key_t key,void* data,int len,int sublen,int condoffset,int condlen,char* blockname,int overtime);

/**
 * [shm_upload(key,data,len,blockname,nodetype,condtype) description]
 * 上传数据到共享内存中
 * @param  int	 key       [IPC_KEY]
 * @param  void	*data      [数据区地址]
 * @param  int	 len       [数据长度]
 * @param  char	*blockname [数据区名称]
 * @param  type	 nodetype  [包含记录类型]
 * @param  type	 condtype  [索引字段名]
 * @param  int   overtime  [超时时间 ms]
 * @return                 [成功返回0，失败返回-1]
 */
#define shm_upload_safe(key,data,len,blockname,nodetype,index,overtime) ({\
	int sublen=sizeof(nodetype);  \
	int condlen=sizeof(((nodetype *)0)->index);  \
	int condoffset=((size_t) &((nodetype *)0)->index);  \
	_shm_upload_safe(key,data,len,sublen,condoffset,condlen,blockname,overtime); })

int shm_download(key_t key,void* cond,char* blockname,void** pdata);
int shm_download_safe(key_t key,void* cond,char* blockname,void** pdata,int overtime);
int shm_select(key_t key,void *cond,char *blockname,void** data);
int shm_select_safe(key_t key,void *cond,char *blockname,void** data,int overtime);

#endif
